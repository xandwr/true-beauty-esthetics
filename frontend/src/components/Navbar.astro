---
// Navbar.astro

import NavButton from "./NavButton.astro";

type NavEntry = {
    label: string;
    path: string;
    type?: "normal" | "cta" | "header";
    icon?: string;
    children?: NavEntry[];
    horizontalMargin?: boolean;
    paddingX?: number;
    paddingY?: number;
};

const navElements: NavEntry[] = [
    { label: "Home", path: "/", type: "header" },
    {
        label: "About",
        path: "#",
        children: [
            { label: "Philosophy", path: "/philosophy", type: "header" },
            { label: "Policies", path: "/policies", type: "header" },
            { label: "Contact", path: "/contact", type: "header" },
        ],
        type: "header",
    },
    { label: "Services", path: "/services", type: "header" },
    { label: "Gift Cards", path: "https://app.squareup.com/gift/MLXV6CHZC08KC/order", type: "header" },
    { label: "Book Now", path: "/book", type: "cta", horizontalMargin: true, paddingX: 16, paddingY: 3 },
];
---

<nav>
    <div class="flex flex-row justify-between items-center">
        <img src="/images/logo.webp" class="h-20" />

        <!-- Desktop Navigation -->
        <ul class="hidden md:flex flex-row gap-2 items-center justify-between playfair text-nowrap text-sm lg:text-lg">
            {
                navElements.map(({ label, path, type, icon, horizontalMargin, paddingX, paddingY, children }) => (
                    <li class="relative group">
                        {children ? (
                            <>
                                <!-- Top level dropdown trigger with arrow -->
                                <div class="flex items-center gap-1">
                                    <NavButton title={label} target={path} type={type} horizontalMargin={horizontalMargin} paddingX={paddingX} paddingY={paddingY} />
                                    <svg
                                        class="w-4 h-4 transition-transform duration-200 group-hover:rotate-180"
                                        fill="none"
                                        stroke="currentColor"
                                        viewBox="0 0 24 24"
                                    >
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                                    </svg>
                                </div>

                                <!-- Dropdown menu -->
                                <ul class="absolute hidden bg-white shadow-lg rounded-md z-10 group-hover:flex flex-col w-max">
                                    {children.map((child) => (
                                        <li class="h-fill p-2">
                                            <NavButton
                                                title={child.label}
                                                target={child.path}
                                                type={child.type}
                                                horizontalMargin={horizontalMargin}
                                                paddingX={paddingX}
                                                paddingY={paddingY} 
                                                fontSize="medium"
                                                expandToParent={true}
                                            />
                                        </li>
                                    ))}
                                </ul>
                            </>
                        ) : (
                            <NavButton title={label} target={path} type={type} horizontalMargin={horizontalMargin} paddingX={paddingX} paddingY={paddingY}/>
                        )}
                    </li>
                ))
            }
        </ul>

        <!-- Mobile Hamburger Button -->
        <button id="hamburger-btn" class="md:hidden z-50 relative w-10 h-10 flex flex-col justify-center items-center gap-1.5" aria-label="Toggle menu">
            <span class="hamburger-line w-6 h-0.5 bg-gray-800 transition-all duration-300"></span>
            <span class="hamburger-line w-6 h-0.5 bg-gray-800 transition-all duration-300"></span>
            <span class="hamburger-line w-6 h-0.5 bg-gray-800 transition-all duration-300"></span>
        </button>

        <!-- Mobile Menu Overlay -->
        <div id="mobile-menu-overlay" class="fixed inset-0 bg-black/20 z-40 opacity-0 pointer-events-none transition-opacity duration-300"></div>

        <!-- Mobile Menu -->
        <div id="mobile-menu" class="fixed top-0 right-0 h-dvh w-74 max-w-[85vw] bg-white shadow-2xl z-40 transform translate-x-full transition-transform duration-300 flex flex-col">
            <div class="text-center pt-6 pb-4 shrink-0">
                <span class="cursive text-[4rem]">True Beauty</span>
                <span class="subcursive uppercase text-[0.5rem]">Esthetics</span>
            </div>

            <div class="flex-1 overflow-y-auto px-6 pb-6">
                <ul class="flex flex-col gap-1 playfair">
                    {
                        navElements.map(({ label, path, children }) => (
                            <li>
                                {children ? (
                                    <div class="mobile-dropdown">
                                        <!-- Dropdown trigger -->
                                        <button class="mobile-dropdown-btn w-full flex items-center justify-between py-3 px-4 text-left text-lg hover:bg-gray-100 rounded-md transition-colors">
                                            <span>{label}</span>
                                            <svg
                                                class="mobile-dropdown-arrow w-5 h-5 transition-transform duration-200"
                                                fill="none"
                                                stroke="currentColor"
                                                viewBox="0 0 24 24"
                                            >
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                                            </svg>
                                        </button>
                                        <!-- Dropdown content -->
                                        <ul class="mobile-dropdown-content max-h-0 overflow-hidden transition-all duration-300 pl-4">
                                            {children.map((child) => (
                                                <li>
                                                    <a
                                                        href={child.path}
                                                        class="block py-2 px-4 text-base hover:bg-gray-100 rounded-md transition-colors"
                                                    >
                                                        {child.label}
                                                    </a>
                                                </li>
                                            ))}
                                        </ul>
                                    </div>
                                ) : (
                                    <a
                                        href={path}
                                        class="block py-3 px-4 text-lg hover:bg-gray-100 rounded-md transition-colors"
                                    >
                                        {label}
                                    </a>
                                )}
                            </li>
                        ))
                    }
                </ul>
            </div>
        </div>
    </div>
</nav>

<script is:inline>
    function initMobileMenu() {
        // Mobile menu toggle
        const hamburgerBtn = document.getElementById('hamburger-btn');
        const mobileMenu = document.getElementById('mobile-menu');
        const mobileMenuOverlay = document.getElementById('mobile-menu-overlay');
        const hamburgerLines = hamburgerBtn?.querySelectorAll('.hamburger-line');

        function closeMenu() {
            mobileMenu?.classList.add('translate-x-full');
            mobileMenuOverlay?.classList.add('opacity-0', 'pointer-events-none');
            hamburgerLines?.[0]?.classList.remove('rotate-45', 'translate-y-2');
            hamburgerLines?.[1]?.classList.remove('opacity-0');
            hamburgerLines?.[2]?.classList.remove('-rotate-45', '-translate-y-2');
            // Re-enable body scrolling
            document.body.style.overflow = '';
        }

        function openMenu() {
            mobileMenu?.classList.remove('translate-x-full');
            mobileMenuOverlay?.classList.remove('opacity-0', 'pointer-events-none');
            hamburgerLines?.[0]?.classList.add('rotate-45', 'translate-y-2');
            hamburgerLines?.[1]?.classList.add('opacity-0');
            hamburgerLines?.[2]?.classList.add('-rotate-45', '-translate-y-2');
            // Disable body scrolling
            document.body.style.overflow = 'hidden';
        }

        function toggleMenu() {
            const isOpen = !mobileMenu?.classList.contains('translate-x-full');
            if (isOpen) {
                closeMenu();
            } else {
                openMenu();
            }
        }

        hamburgerBtn?.addEventListener('click', toggleMenu);
        mobileMenuOverlay?.addEventListener('click', toggleMenu);

        // Mobile dropdown toggles
        const dropdownBtns = document.querySelectorAll('.mobile-dropdown-btn');

        dropdownBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const dropdown = btn.closest('.mobile-dropdown');
                const content = dropdown?.querySelector('.mobile-dropdown-content');
                const arrow = btn.querySelector('.mobile-dropdown-arrow');
                const isOpen = content?.classList.contains('max-h-96');

                if (isOpen) {
                    content?.classList.remove('max-h-96');
                    content?.classList.add('max-h-0');
                    arrow?.classList.remove('rotate-180');
                } else {
                    content?.classList.remove('max-h-0');
                    content?.classList.add('max-h-96');
                    arrow?.classList.add('rotate-180');
                }
            });
        });

        // Close menu on link click (smooth close, no immediate toggle)
        const mobileLinks = mobileMenu?.querySelectorAll('a');
        mobileLinks?.forEach(link => {
            link.addEventListener('click', () => {
                closeMenu();
            });
        });

        // Close menu smoothly before page transition starts
        document.addEventListener('astro:before-preparation', closeMenu);
    }

    // Initialize on page load
    initMobileMenu();

    // Re-initialize after Astro page transitions
    document.addEventListener('astro:after-swap', initMobileMenu);
</script>